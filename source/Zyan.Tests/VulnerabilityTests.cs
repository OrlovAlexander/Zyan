#if !FX3 && !FX4

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Security;
using Zyan.Communication;
using Zyan.Communication.Protocols;
using Zyan.Communication.Protocols.Http;
using Zyan.Communication.Protocols.Ipc;
using Zyan.Communication.Protocols.Tcp;
using Hashtable = System.Collections.Hashtable;

namespace Zyan.Tests
{
	#region Unit testing platform abstraction layer
#if NUNIT
	using NUnit.Framework;
	using TestClass = NUnit.Framework.TestFixtureAttribute;
	using TestMethod = NUnit.Framework.TestAttribute;
	using ClassInitializeNonStatic = NUnit.Framework.OneTimeSetUpAttribute;
	using ClassInitialize = DummyAttribute;
	using ClassCleanupNonStatic = NUnit.Framework.OneTimeTearDownAttribute;
	using ClassCleanup = DummyAttribute;
	using TestContext = System.Object;
	using AssertFailedException = NUnit.Framework.AssertionException;
#else
	using Microsoft.VisualStudio.TestTools.UnitTesting;
	using ClassInitializeNonStatic = DummyAttribute;
	using ClassCleanupNonStatic = DummyAttribute;
#endif
	#endregion

	/// <summary>
	/// Test class for the known vulnerabilities.
	///</summary>
	[TestClass]
	public class VulnerabilityTests
	{
		#region Interfaces and components

		/// <summary>
		/// Sample server interface
		/// </summary>
		public interface ISampleServer
		{
			void TestMethod(object payload);
		}

		/// <summary>
		/// Sample server implementation
		/// </summary>
		public class SampleServer : ISampleServer
		{
			public void TestMethod(object payload)
			{
				Assert.Fail("This method isn't expected to be called.");
			}
		}

		#endregion

		public static object GetTypeConfuseDelegate(string cmd)
		{
			var da = new Comparison<string>(string.Compare);
			var d = (Comparison<string>)Delegate.Combine(da, da);
			var comp = Comparer<string>.Create(d);
			var set = new SortedSet<string>(comp);
			set.Add("cmd");
			set.Add("/c " + cmd);

			var fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
			object[] invoke_list = d.GetInvocationList();
			// Modify the invocation list to add Process::Start(string, string)
			invoke_list[1] = new Func<string, string, Process>(Process.Start);
			fi.SetValue(d, invoke_list);

			return set;
		}

		private void TestVulnerability(string hostName, string serverUrl, IServerProtocolSetup serverSetup, IClientProtocolSetup clientSetup, object payload)
		{
			ZyanSettings.DisableUrlRandomization = true;

			using (var zyanHost = new ZyanComponentHost(hostName, serverSetup))
			{
				zyanHost.RegisterComponent<ISampleServer, SampleServer>(ActivationType.Singleton);
				var credentials = new Hashtable
				{
					{ "Login", "hacker" },
					{ "Password", "secret" },
					{ string.Empty, payload }
				};

				using (var zyanConnection = new ZyanConnection(serverUrl, clientSetup))
				{
					var proxy = zyanConnection.CreateProxy<ISampleServer>();
					AssertEx.Throws<SecurityException>(() => proxy.TestMethod(payload));
				}

				// should throw
				AssertEx.Throws<SecurityException>(() =>
				{
					using (new ZyanConnection(serverUrl, clientSetup, credentials, true, true))
					{
					}
				});
			}
		}

		const string HostName = "ZyanVulnerableServer";

		public void TestIpcBinaryVulnerability(object payload)
		{
			var portName = "ZyanVulnerabilityTest";
			var serverUrl = $"ipc://{portName}/{HostName}";
			var serverSetup = new IpcBinaryServerProtocolSetup(portName);
			var clientSetup = new IpcBinaryClientProtocolSetup();

			TestVulnerability(HostName, serverUrl, serverSetup, clientSetup, payload);
		}

		public void TestTcpBinaryVulnerability(object payload)
		{
			var portNumber = 12345;
			var serverUrl = $"tcp://localhost:{portNumber}/{HostName}";
			var serverSetup = new TcpBinaryServerProtocolSetup(portNumber);
			var clientSetup = new TcpBinaryClientProtocolSetup();

			TestVulnerability(HostName, serverUrl, serverSetup, clientSetup, payload);
		}

		public void TestTcpCustomVulnerability(bool encryption, object payload)
		{
			var portNumber = 23456;
			var serverUrl = $"tcp://localhost:{portNumber}/{HostName}";
			var serverSetup = new TcpCustomServerProtocolSetup(portNumber, null, encryption);
			var clientSetup = new TcpCustomClientProtocolSetup(encryption);

			TestVulnerability(HostName, serverUrl, serverSetup, clientSetup, payload);
		}

		public void TestHttpCustomVulnerability(bool encryption, object payload)
		{
			var portNumber = 34567;
			var serverUrl = $"http://localhost:{portNumber}/{HostName}";
			var serverSetup = new HttpCustomServerProtocolSetup(portNumber, null, encryption);
			var clientSetup = new HttpCustomClientProtocolSetup(encryption);

			TestVulnerability(HostName, serverUrl, serverSetup, clientSetup, payload);
		}

		[TestMethod]
		public void TestIpcBinaryVulnerability_TypeConfuseDelegate()
		{
			TestIpcBinaryVulnerability(GetTypeConfuseDelegate("calc"));
		}

		[TestMethod]
		public void TestTcpBinaryVulnerability_TypeConfuseDelegate()
		{
			TestTcpBinaryVulnerability(GetTypeConfuseDelegate("calc"));
		}

		[TestMethod]
		public void TestTcpCustomVulnerability_TypeConfuseDelegate()
		{
			TestTcpCustomVulnerability(true, GetTypeConfuseDelegate("calc"));
			TestTcpCustomVulnerability(false, GetTypeConfuseDelegate("calc"));
		}

		[TestMethod]
		public void TestHttpCustomVulnerability_TypeConfuseDelegate()
		{
			TestHttpCustomVulnerability(true, GetTypeConfuseDelegate("calc"));
			TestHttpCustomVulnerability(false, GetTypeConfuseDelegate("calc"));
		}
	}
}

#endif
